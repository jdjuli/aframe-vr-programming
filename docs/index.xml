<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VR Programming</title>
    <link>https://jdjuli.github.io/vr-programming/</link>
    <description>Recent content on VR Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Nov 2021 09:33:24 +0100</lastBuildDate><atom:link href="https://jdjuli.github.io/vr-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>custom-hand</title>
      <link>https://jdjuli.github.io/vr-programming/components/custom-hand/</link>
      <pubDate>Wed, 24 Nov 2021 09:33:24 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/components/custom-hand/</guid>
      <description>Purpose Join multiple components into one that provides a virtual hand with minimum configuration and adapts to the scene configuration (i.e. If the scene uses physics, the components attached to the hand would be different).
Schema  attribute name: hand  type: string oneOf: left, right   attribute name: colliderSelector  description: Selector of entities the user can interact with type: string (valid CSS selector)    Usage Attach this component to the entity that you want to become a hand (you don&amp;rsquo;t have to provide any kind of geometry for this) and make sure that you set the hand attribute to load the right model.</description>
    </item>
    
    <item>
      <title>program</title>
      <link>https://jdjuli.github.io/vr-programming/components/program/</link>
      <pubDate>Wed, 24 Nov 2021 09:33:24 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/components/program/</guid>
      <description>Purpose Represent a program, containing all the instructions and a reference to the target of execution
Schema  attribute name: active  description: whether the program should display it&amp;rsquo;s instructions or not type: boolean default: true    Usage This component should be placed inside an ide entity, and as the program grows on the positive X axis, keep that in mind when positioning it on the scene.
To-Do This component is being developed right now, here are the thing I&amp;rsquo;ve planned for it but are not implemented yet:</description>
    </item>
    
    <item>
      <title>multidevice</title>
      <link>https://jdjuli.github.io/vr-programming/components/multidevice/</link>
      <pubDate>Mon, 22 Nov 2021 20:06:19 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/components/multidevice/</guid>
      <description>Purpose This component adapts the user controls to the inputs of the device that is using, making easier to develop scenes compatibles with both VR headsets and PC.
Schema  attribute name: colliderSelector  description: Selector of entities the user can interact with type: string (valid CSS selector)   attribute name: acceleration  description: How fast can the user navigate the scene with the arrow keys type: number default: 20.</description>
    </item>
    
    <item>
      <title>instruction</title>
      <link>https://jdjuli.github.io/vr-programming/components/instruction/</link>
      <pubDate>Mon, 22 Nov 2021 10:42:11 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/components/instruction/</guid>
      <description>Purpose This component represents an action inside the program, which can be parametrized by attaching a parameter and a amount (not implemented yet)
Schema  attribute name: function  type: string default: move oneOf: move, rotate   attribute name: parameter  type: string oneOf: up, down, left, right, forward, backward (more to be added)   attribute name: amount  type: number default: 1.0    Usage The entity that has this component attached must be placed inside another with the component ide attached to it, but is not needed to put the instruction inside a program (and not recommended right now as it&amp;rsquo;s under development).</description>
    </item>
    
    <item>
      <title>parameter</title>
      <link>https://jdjuli.github.io/vr-programming/components/parameter/</link>
      <pubDate>Sat, 20 Nov 2021 13:33:43 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/components/parameter/</guid>
      <description>Purpose This component is intended to store and represent qualitative parameters for the instructions, like the direction of displacements or axis of rotations among others.
Schema  attribute name: n/a  description: qualitative property such as direction of movement or axis of rotation type: string default: up oneOf: up, down, left, right, forward, backward (more to be added)    Usage The entity this component is attached to must be children of another entity with the component ide as this one is aware of if it&amp;rsquo;s a child of an instruction and needs to have a reference to the ide entity to reparent to it when extracted from the instruction.</description>
    </item>
    
    <item>
      <title>Interaction improvements</title>
      <link>https://jdjuli.github.io/vr-programming/interaction-improvements/</link>
      <pubDate>Thu, 11 Nov 2021 21:30:21 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/interaction-improvements/</guid>
      <description>My thesis mentor gave me the idea of improving the interaction by implementing a previewing dynamic that allows the user to view how would the program look like if a certain instruction is added. I&amp;rsquo;ve took the previous demo 16 as the base to implement this preview and instead of overwriting the scene, I decided to create a new one to avoid anyone interested on following my progress having to navigate through the repository commits and start a webserver on their own to test it.</description>
    </item>
    
    <item>
      <title>Creating iterative programs</title>
      <link>https://jdjuli.github.io/vr-programming/creating-iterative-programs/</link>
      <pubDate>Thu, 28 Oct 2021 12:36:07 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/creating-iterative-programs/</guid>
      <description>I&amp;rsquo;ve been working on making a fully usable demo that allows the users to create sequential programs. Also, I&amp;rsquo;m exploring two different ways of creating instruction blocks, both of them implemented on the demo 16.
How to use the demo 16: This demo implements two different ways of creating new instructions blocks, I&amp;rsquo;ll explain how to use each one:
  Use a static &amp;lsquo;panel&amp;rsquo; to select the desired instruction:</description>
    </item>
    
    <item>
      <title>super-hands-component issue</title>
      <link>https://jdjuli.github.io/vr-programming/super-hands-component-issue/</link>
      <pubDate>Wed, 22 Sep 2021 17:36:07 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/super-hands-component-issue/</guid>
      <description>The library aframe-physics-system which I&amp;rsquo;m using to add physics to my scenes supports 2 physics engines, cannon.js and ammo.js, but recently I started using the library super-hands-component and it&amp;rsquo;s component super-hands attached to the A-Frame component hand-controls in order to provide a more natural way to interact with the elements of the scene, but super-hands-component is only compatible with the cannon.js engine. The problem arises with the latest version of A-Frame, which breaks the support of cannon.</description>
    </item>
    
    <item>
      <title>Iteration 3</title>
      <link>https://jdjuli.github.io/vr-programming/iteration-3/</link>
      <pubDate>Thu, 19 Aug 2021 16:56:21 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/iteration-3/</guid>
      <description>On this iteration, the main objectives are:
 Ensure that the scenes can be used on PC and Oculus Quest. Create an element specifically intended for executing the program (a &amp;ldquo;run&amp;rdquo; button) Modify the program component so it creates a platform on which, by dropping the blocks, the user can create the program.  Scenes created  Demonstration of component &amp;ldquo;multidevice&amp;rdquo; On this scene, the component multidevice takes care of detecting if the device is a VR headset or not and on each case, initializes the corresponding controllers.</description>
    </item>
    
    <item>
      <title>Iteration 2</title>
      <link>https://jdjuli.github.io/vr-programming/iteration-2/</link>
      <pubDate>Tue, 22 Jun 2021 19:36:30 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/iteration-2/</guid>
      <description>On this iteration the objectives are to improve the comunication between components and start making simple programming-oriented components.
Scenes developed   Listening for entity collisions
The scene represents a bunch of spheres bouncing and colliding, each time the spheres collide their color changes to red for a small time frame. To archieve this behaviour I created a component called &amp;ldquo;colorea_colision&amp;rdquo; that listens for &amp;ldquo;collide&amp;rdquo; events and changes the color of the attached entity for a short time.</description>
    </item>
    
    <item>
      <title>Iteration 1</title>
      <link>https://jdjuli.github.io/vr-programming/iteration-1/</link>
      <pubDate>Thu, 10 Jun 2021 19:36:30 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/iteration-1/</guid>
      <description>I don&amp;rsquo;t have a lot of experience programming on Javascript before and also, as A-Frame is a component-based framework, the objectives of this first iteration are becoming familiar with Javascript and A-Frame.
This first scenes are very basic and not so interactive, because I used them as &amp;ldquo;prototypes&amp;rdquo; for the next ones, I decided to keep them to ilustrate my progress.
Scenes developed   Non parametric component
This scene shows one brown sphere, it&amp;rsquo;s entity element on the DOM has the attribute &amp;ldquo;esfera_marron&amp;rdquo; set, which maps to the component with the same name.</description>
    </item>
    
    <item>
      <title>About this blog</title>
      <link>https://jdjuli.github.io/vr-programming/about-vr-programming/</link>
      <pubDate>Tue, 08 Jun 2021 13:15:11 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/vr-programming/about-vr-programming/</guid>
      <description>Hello! My name is Julián Sánchez and this blog is part of my bachelor thesis on Informatic Engineering.
About the proyect This proyect aims to create a virtual environment in which, the users could build programs that allow them to move a virtual drone. The main focus is to exploit all the advantages of the virtual reality in contrast with the 2D environments, such as the well-known IDEs.
Where did the idea came from?</description>
    </item>
    
  </channel>
</rss>

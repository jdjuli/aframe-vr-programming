<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VR Programming</title>
    <link>https://jdjuli.github.io/virto/</link>
    <description>Recent content on VR Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Dec 2021 18:05:17 +0100</lastBuildDate><atom:link href="https://jdjuli.github.io/virto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Version 0.1</title>
      <link>https://jdjuli.github.io/virto/version-0.1/</link>
      <pubDate>Mon, 04 Apr 2022 11:08:50 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/virto/version-0.1/</guid>
      <description>This is the first fully usable version of the proyect (more about it here).
It allows the creation of sequential programs with variables that can be modified manually on runtime and is completely compatible with VR headsets and partialy with PCs.
Things that can be done:  Write your own programs on HTML Run the program Modify the program Work with variables Build your own program from scratch  Scenes available to play with  Sample program Sample program &amp;amp; build-your-own   Write your own programs on HTML Even though you only need to know the basics of HTML to write programs with this proyect, I would recommend to get used to work with A-Frame so you can get the most of it.</description>
    </item>
    
    <item>
      <title>Review on colliders</title>
      <link>https://jdjuli.github.io/virto/review-on-colliders/</link>
      <pubDate>Fri, 28 Jan 2022 14:24:17 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/review-on-colliders/</guid>
      <description>This few past weeks I remembered a small issue I had from the begining related to the &amp;lsquo;realism&amp;rsquo; of the grab and touch. I&amp;rsquo;ve already developed the component box-collider, which implements an OBB collider (i&amp;rsquo;ll explain this later) but it&amp;rsquo;s performance was worse than what I thought when I designed it.
I decided to invest some time doing some research about how colliders work and creating components to use them on A-Frame, I came out with 4 types of colliders:</description>
    </item>
    
    <item>
      <title>Including parameters to instructions</title>
      <link>https://jdjuli.github.io/virto/parameters-on-instructions/</link>
      <pubDate>Sat, 18 Dec 2021 20:16:07 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/parameters-on-instructions/</guid>
      <description>I decided to put aside the conditional execution until I had a solid variable and condition evaluation system, and I put an intermediate milestone between a non-parametric execution and that objective of a fully functional variable manipulation and logical operators evaluation system on the execution of programs that allow &amp;lsquo;static&amp;rsquo; variable and constant assignements (meaning they don&amp;rsquo;t vary with time but are intended to do so as the developments continues).</description>
    </item>
    
    <item>
      <title>box-collider</title>
      <link>https://jdjuli.github.io/virto/components/box-collider/</link>
      <pubDate>Sat, 18 Dec 2021 18:05:17 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/components/box-collider/</guid>
      <description>Purpose Detect collisions precisely between a point and a box shaped entity
Schema  attribute name: colliderSelector  description: CSS selector of entities to collide with. type: string   attribute name: skipTicks  description: How many tick updates should be ignored before computing intersections again type: Number default: 0 (check for collisions on each tick call)    Usage Import the component with:
&amp;lt;script src=&amp;#34;https://raw.githubusercontent.com/jdjuli/vr-programming/main/static/js/box-collider.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; Attach the component to the entity that will represent the &amp;lsquo;point&amp;rsquo; of the intersection (i.</description>
    </item>
    
    <item>
      <title>emit-event-button</title>
      <link>https://jdjuli.github.io/virto/components/emit-event-button/</link>
      <pubDate>Thu, 16 Dec 2021 12:20:25 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/components/emit-event-button/</guid>
      <description>Purpose Provide a generic button that can notify other entities through events when it has been touched
Schema  attribute name: event  description: The name of the event that will be send type: string   attribute name: emitTo  description: The entity to be notified. By default, the event will be sent to the scene type: selector   attribute name: text  description: Text to be displayed on the button type: string    Usage Import the component with:</description>
    </item>
    
    <item>
      <title>value</title>
      <link>https://jdjuli.github.io/virto/components/value/</link>
      <pubDate>Thu, 16 Dec 2021 10:16:54 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/components/value/</guid>
      <description>Purpose This component manages an entity that represent a numeric value inside the program, it can be a variable registered on variables-state or a constant.
Schema  attribute name: variable  description: variable name to get value from, if it doesn&amp;rsquo;t exist, it will be created with the value provided. Don&amp;rsquo;t set it to represent a constant type: string   attribute name: value  description: numeric value, if variable name is set but doesn&amp;rsquo;t exist, the variable will take this value, but if it exist, this value will be ignored type: number   attribute name: display  description: what to show on the entity, either the numeric value or the variable name (if no variable name is set, it&amp;rsquo;ll display &amp;lsquo;#&#39;) type: string default: VALUE oneOf: VALUE, NAME    Usage Import the component with:</description>
    </item>
    
    <item>
      <title>variables-state</title>
      <link>https://jdjuli.github.io/virto/components/variables-state/</link>
      <pubDate>Wed, 15 Dec 2021 10:17:22 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/components/variables-state/</guid>
      <description>Purpose This file registers a state using the aframe-state-component to provide a mechanism to have global numeric variables on the scene.
Usage Import the JavaScript files on the &amp;lt;head&amp;gt; of the html with the following tags:
&amp;lt;script src=&amp;#34;https://unpkg.com/aframe-state-component@7.1.0/dist/aframe-state-component.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://raw.githubusercontent.com/jdjuli/vr-programming/main/static/js/variables-system.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; To access the variables in your code, you&amp;rsquo;ll need a reference to the state system, which can be obtained inside your component by doing this:
let scene = this.el.sceneEl //Or document.</description>
    </item>
    
    <item>
      <title>assets-manager</title>
      <link>https://jdjuli.github.io/virto/components/assets-manager/</link>
      <pubDate>Tue, 14 Dec 2021 16:56:47 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/components/assets-manager/</guid>
      <description>Purpose System that allows the programmer to load assets easily at runtime and handles the loading failures
Usage Import the JavaScript file on the &amp;lt;head&amp;gt; of the html with the following tag:
&amp;lt;script src=&amp;#34;https://raw.githubusercontent.com/jdjuli/vr-programming/main/static/js/assets-manager.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; To access the system in your code, you&amp;rsquo;ll need a reference to the scene element, which can be obtained inside your component by doing this:
let assetsManager = this.el.sceneEl.systems[&amp;#39;assets-manager&amp;#39;]; Once you have a reference to the system, it exposes two functions:</description>
    </item>
    
    <item>
      <title>custom-hand</title>
      <link>https://jdjuli.github.io/virto/components/custom-hand/</link>
      <pubDate>Wed, 24 Nov 2021 09:33:24 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/components/custom-hand/</guid>
      <description>Purpose Join multiple components into one that provides a virtual hand with minimum configuration and adapts to the scene configuration (i.e. If the scene uses physics, the components attached to the hand would be different).
Schema  attribute name: hand  type: string oneOf: left, right   attribute name: colliderSelector  description: Selector of entities the user can interact with type: string (valid CSS selector)    Usage Attach this component to the entity that you want to become a hand (you don&amp;rsquo;t have to provide any kind of geometry for this) and make sure that you set the hand attribute to load the right model.</description>
    </item>
    
    <item>
      <title>program</title>
      <link>https://jdjuli.github.io/virto/components/program/</link>
      <pubDate>Wed, 24 Nov 2021 09:33:24 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/components/program/</guid>
      <description>Purpose Represent a program, containing all the instructions and a reference to the target of execution
Schema  attribute name: active  description: whether the program should display it&amp;rsquo;s instructions or not type: boolean default: true    Usage This component should be placed inside an ide entity, and as the program grows on the positive X axis, keep that in mind when positioning it on the scene.
To-Do This component is being developed right now, here are the thing I&amp;rsquo;ve planned for it but are not implemented yet:</description>
    </item>
    
    <item>
      <title>multidevice</title>
      <link>https://jdjuli.github.io/virto/components/multidevice/</link>
      <pubDate>Mon, 22 Nov 2021 20:06:19 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/components/multidevice/</guid>
      <description>Purpose This component adapts the user controls to the inputs of the device that is using, making easier to develop scenes compatibles with both VR headsets and PC.
Schema  attribute name: colliderSelector  description: Selector of entities the user can interact with type: string (valid CSS selector)   attribute name: acceleration  description: How fast can the user navigate the scene with the arrow keys type: number default: 20.</description>
    </item>
    
    <item>
      <title>instruction</title>
      <link>https://jdjuli.github.io/virto/components/instruction/</link>
      <pubDate>Mon, 22 Nov 2021 10:42:11 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/components/instruction/</guid>
      <description>Purpose This component represents an action inside the program, which can be parametrized by attaching a parameter and a amount (not implemented yet)
Schema  attribute name: function  type: string default: move oneOf: move, rotate   attribute name: parameter  type: string oneOf: up, down, left, right, forward, backward (more to be added)   attribute name: amount  type: number default: 1.0    Usage The entity that has this component attached must be placed inside another with the component ide attached to it, but is not needed to put the instruction inside a program (and not recommended right now as it&amp;rsquo;s under development).</description>
    </item>
    
    <item>
      <title>parameter</title>
      <link>https://jdjuli.github.io/virto/components/parameter/</link>
      <pubDate>Sat, 20 Nov 2021 13:33:43 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/components/parameter/</guid>
      <description>Purpose This component is intended to store and represent qualitative parameters for the instructions, like the direction of displacements or axis of rotations among others.
Schema  attribute name: n/a  description: qualitative property such as direction of movement or axis of rotation type: string default: up oneOf: up, down, left, right, forward, backward (more to be added)    Usage The entity this component is attached to must be children of another entity with the component ide as this one is aware of if it&amp;rsquo;s a child of an instruction and needs to have a reference to the ide entity to reparent to it when extracted from the instruction.</description>
    </item>
    
    <item>
      <title>Interaction improvements</title>
      <link>https://jdjuli.github.io/virto/interaction-improvements/</link>
      <pubDate>Thu, 11 Nov 2021 21:30:21 +0100</pubDate>
      
      <guid>https://jdjuli.github.io/virto/interaction-improvements/</guid>
      <description>My thesis mentor gave me the idea of improving the interaction by implementing a previewing dynamic that allows the user to view how would the program look like if a certain instruction is added. I&amp;rsquo;ve took the previous demo 16 as the base to implement this preview and instead of overwriting the scene, I decided to create a new one to avoid anyone interested on following my progress having to navigate through the repository commits and start a webserver on their own to test it.</description>
    </item>
    
    <item>
      <title>Creating iterative programs</title>
      <link>https://jdjuli.github.io/virto/creating-iterative-programs/</link>
      <pubDate>Thu, 28 Oct 2021 12:36:07 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/virto/creating-iterative-programs/</guid>
      <description>I&amp;rsquo;ve been working on making a fully usable demo that allows the users to create sequential programs. Also, I&amp;rsquo;m exploring two different ways of creating instruction blocks, both of them implemented on the demo 16.
How to use the demo 16: This demo implements two different ways of creating new instructions blocks, I&amp;rsquo;ll explain how to use each one:
  Use a static &amp;lsquo;panel&amp;rsquo; to select the desired instruction:</description>
    </item>
    
    <item>
      <title>super-hands-component issue</title>
      <link>https://jdjuli.github.io/virto/super-hands-component-issue/</link>
      <pubDate>Wed, 22 Sep 2021 17:36:07 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/virto/super-hands-component-issue/</guid>
      <description>The library aframe-physics-system which I&amp;rsquo;m using to add physics to my scenes supports 2 physics engines, cannon.js and ammo.js, but recently I started using the library super-hands-component and it&amp;rsquo;s component super-hands attached to the A-Frame component hand-controls in order to provide a more natural way to interact with the elements of the scene, but super-hands-component is only compatible with the cannon.js engine. The problem arises with the latest version of A-Frame, which breaks the support of cannon.</description>
    </item>
    
    <item>
      <title>Iteration 3</title>
      <link>https://jdjuli.github.io/virto/iteration-3/</link>
      <pubDate>Thu, 19 Aug 2021 16:56:21 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/virto/iteration-3/</guid>
      <description>On this iteration, the main objectives are:
 Ensure that the scenes can be used on PC and Oculus Quest. Create an element specifically intended for executing the program (a &amp;ldquo;run&amp;rdquo; button) Modify the program component so it creates a platform on which, by dropping the blocks, the user can create the program.  Scenes created  Demonstration of component &amp;ldquo;multidevice&amp;rdquo; On this scene, the component multidevice takes care of detecting if the device is a VR headset or not and on each case, initializes the corresponding controllers.</description>
    </item>
    
    <item>
      <title>Iteration 2</title>
      <link>https://jdjuli.github.io/virto/iteration-2/</link>
      <pubDate>Tue, 22 Jun 2021 19:36:30 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/virto/iteration-2/</guid>
      <description>On this iteration the objectives are to improve the comunication between components and start making simple programming-oriented components.
Scenes developed   Listening for entity collisions
The scene represents a bunch of spheres bouncing and colliding, each time the spheres collide their color changes to red for a small time frame. To archieve this behaviour I created a component called &amp;ldquo;colorea_colision&amp;rdquo; that listens for &amp;ldquo;collide&amp;rdquo; events and changes the color of the attached entity for a short time.</description>
    </item>
    
    <item>
      <title>Iteration 1</title>
      <link>https://jdjuli.github.io/virto/iteration-1/</link>
      <pubDate>Thu, 10 Jun 2021 19:36:30 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/virto/iteration-1/</guid>
      <description>I don&amp;rsquo;t have a lot of experience programming on Javascript before and also, as A-Frame is a component-based framework, the objectives of this first iteration are becoming familiar with Javascript and A-Frame.
This first scenes are very basic and not so interactive, because I used them as &amp;ldquo;prototypes&amp;rdquo; for the next ones, I decided to keep them to ilustrate my progress.
Scenes developed   Non parametric component
This scene shows one brown sphere, it&amp;rsquo;s entity element on the DOM has the attribute &amp;ldquo;esfera_marron&amp;rdquo; set, which maps to the component with the same name.</description>
    </item>
    
    <item>
      <title>About this blog</title>
      <link>https://jdjuli.github.io/virto/about-virto/</link>
      <pubDate>Tue, 08 Jun 2021 13:15:11 +0200</pubDate>
      
      <guid>https://jdjuli.github.io/virto/about-virto/</guid>
      <description>Hello! My name is Julián Sánchez and this blog is part of my bachelor thesis on Informatic Engineering.
About the proyect This proyect aims to create a virtual environment in which, the users could build programs that allow them to move a virtual drone. The main focus is to exploit all the advantages of the virtual reality in contrast with the 2D environments, such as the well-known IDEs.
Where did the idea came from?</description>
    </item>
    
  </channel>
</rss>
